{
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "mcp__ide__getDiagnostics",
      "Bash(ls *)",
      "Bash(ls:*)",
      "Bash(cat *)",
      "Bash(cat:*)",
      "Bash(head *)",
      "Bash(head:*)",
      "Bash(tail *)",
      "Bash(tail:*)",
      "Bash(less *)",
      "Bash(less:*)",
      "Bash(more *)",
      "Bash(more:*)",
      "Bash(find *)",
      "Bash(find:*)",
      "Bash(find . *)",
      "Bash(find ./ *)",
      "Bash(find . -type f *)",
      "Bash(find . -type d *)",
      "Bash(find . -name *)",
      "Bash(find . -iname *)",
      "Bash(find . -type f -name *)",
      "Bash(find . -type f -iname *)",
      "Bash(find . -type f \\( * \\) *)",
      "Bash(find . -type f \\( -name * \\) *)",
      "Bash(find . -type f \\( -name * -o -name * \\) *)",
      "Bash(find . * | grep -v *)",
      "Bash(find . * | grep -E *)",
      "Bash(find . * | grep -v node_modules *)",
      "Bash(find . * | grep -v target *)",
      "Bash(find . * | grep -v build *)",
      "Bash(find . * | grep -v dist *)",
      "Bash(find . * | sort)",
      "Bash(find . * | sort *)",
      "Bash(find . * | head *)",
      "Bash(find . * | tail *)",
      "Bash(find . * | wc *)",
      "Bash(grep *)",
      "Bash(grep:*)",
      "Bash(grep -r *)",
      "Bash(grep -R *)",
      "Bash(grep -n *)",
      "Bash(grep -i *)",
      "Bash(grep -E *)",
      "Bash(grep -v *)",
      "Bash(grep -l *)",
      "Bash(grep -c *)",
      "Bash(rg *)",
      "Bash(rg:*)",
      "Bash(ack *)",
      "Bash(ack:*)",
      "Bash(ag *)",
      "Bash(ag:*)",
      "Bash(tree *)",
      "Bash(tree:*)",
      "Bash(tree -a *)",
      "Bash(tree -I *)",
      "Bash(tree -L *)",
      "Bash(du *)",
      "Bash(du:*)",
      "Bash(wc *)",
      "Bash(wc:*)",
      "Bash(unzip *)",
      "Bash(unzip:*)",
      "Bash(echo *)",
      "Bash(echo:*)",
      "Bash(timeout *)",
      "Bash(timeout:*)",
      "Bash(true)",
      "Bash(xargs *)",
      "Bash(xargs:*)",
      "Bash(sort *)",
      "Bash(sort:*)",
      "Bash(uniq *)",
      "Bash(uniq:*)",
      "Bash(find * | xargs *)",
      "Bash(find * | xargs:*)",
      "Bash(find * | grep *)",
      "Bash(* | grep *)",
      "Bash(* | wc *)",
      "Bash(* | sort *)",
      "Bash(* | uniq *)",
      "Bash(* | head *)",
      "Bash(* | tail *)",
      "Bash(git status)",
      "Bash(git status:*)",
      "Bash(git log *)",
      "Bash(git log:*)",
      "Bash(git diff *)",
      "Bash(git diff:*)",
      "Bash(git branch *)",
      "Bash(git branch:*)",
      "Bash(git show *)",
      "Bash(git show:*)",
      "Bash(git blame *)",
      "Bash(git blame:*)",
      "Bash(git ls-files *)",
      "Bash(git ls-files:*)",
      "Bash(git describe *)",
      "Bash(git describe:*)",
      "Bash(git tag *)",
      "Bash(git tag:*)",
      "Bash(git remote -v)",
      "Bash(git remote:*)",
      "Bash(git add *)",
      "Bash(git add:*)",
      "Bash(git commit *)",
      "Bash(git commit:*)",
      "Bash(git checkout *)",
      "Bash(git checkout:*)",
      "Bash(git stash *)",
      "Bash(git stash:*)",
      "Bash(git merge *)",
      "Bash(git merge:*)",
      "Bash(git rebase *)",
      "Bash(git rebase:*)",
      "Bash(mvn clean)",
      "Bash(mvn clean:*)",
      "Bash(mvn compile)",
      "Bash(mvn compile:*)",
      "Bash(mvn package)",
      "Bash(mvn package:*)",
      "Bash(mvn install)",
      "Bash(mvn install:*)",
      "Bash(mvn clean compile)",
      "Bash(mvn clean package)",
      "Bash(mvn clean install)",
      "Bash(mvn * -P*)",
      "Bash(mvn test)",
      "Bash(mvn test:*)",
      "Bash(mvn verify)",
      "Bash(mvn verify:*)",
      "Bash(mvn test -Dtest=*)",
      "Bash(mvn surefire:test)",
      "Bash(mvn failsafe:integration-test)",
      "Bash(mvn exec:java *)",
      "Bash(mvn verify -P license-check)",
      "Bash(mvn dependency:tree)",
      "Bash(mvn dependency:analyze)",
      "Bash(mvn versions:display-dependency-updates)",
      "Bash(java *)",
      "Bash(java:*)",
      "Bash(timeout 10s java *)",
      "Bash(timeout 10s java:*)",
      "Bash(javac *)",
      "Bash(javac:*)",
      "Bash(jdeps *)",
      "Bash(jdeps:*)",
      "Bash(jlink *)",
      "Bash(jlink:*)",
      "Bash(psql *)",
      "Bash(psql:*)",
      "Bash(pg_isready *)",
      "Bash(pg_isready:*)",
      "Bash(pg_dump *)",
      "Bash(pg_dump:*)",
      "Bash(mvn liquibase:status)",
      "Bash(mvn liquibase:update)",
      "Bash(mvn liquibase:rollback *)",
      "Bash(mvn liquibase:diff)",
      "Bash(mvn liquibase:generateChangeLog)",
      "Bash(docker ps *)",
      "Bash(docker ps:*)",
      "Bash(docker logs *)",
      "Bash(docker logs:*)",
      "Bash(docker inspect *)",
      "Bash(docker inspect:*)",
      "Bash(docker images *)",
      "Bash(docker images:*)",
      "Bash(docker stats *)",
      "Bash(docker stats:*)",
      "Bash(docker build *)",
      "Bash(docker build:*)",
      "Bash(docker run *)",
      "Bash(docker run:*)",
      "Bash(docker exec *)",
      "Bash(docker exec:*)",
      "Bash(docker cp *)",
      "Bash(docker cp:*)",
      "Bash(docker-compose *)",
      "Bash(docker-compose:*)",
      "Bash(docker compose *)",
      "Bash(docker compose:*)",
      "Bash(curl http://localhost:*)",
      "Bash(curl http://127.0.0.1:*)",
      "Bash(curl -X * http://localhost:*)",
      "Bash(curl -X * http://127.0.0.1:*)",
      "Bash(curl:*)",
      "Bash(netstat *)",
      "Bash(netstat:*)",
      "Bash(lsof *)",
      "Bash(lsof:*)",
      "Bash(ss *)",
      "Bash(ss:*)",
      "Bash(ping localhost)",
      "Bash(ping 127.0.0.1)",
      "Bash(npm install)",
      "Bash(npm install:*)",
      "Bash(npm ci)",
      "Bash(npm ci:*)",
      "Bash(npm run *)",
      "Bash(npm run:*)",
      "Bash(npm test)",
      "Bash(npm test:*)",
      "Bash(npm start)",
      "Bash(npm start:*)",
      "Bash(npm run build)",
      "Bash(npm run dev)",
      "Bash(npm list *)",
      "Bash(npm list:*)",
      "Bash(npm audit)",
      "Bash(npm audit:*)",
      "Bash(yarn *)",
      "Bash(yarn:*)",
      "Bash(pnpm *)",
      "Bash(pnpm:*)",
      "Bash(jq *)",
      "Bash(jq:*)",
      "Bash(yq *)",
      "Bash(yq:*)",
      "Bash(mkdir *)",
      "Bash(mkdir:*)",
      "Bash(touch *)",
      "Bash(touch:*)",
      "Bash(cp *)",
      "Bash(cp:*)",
      "Bash(mv *)",
      "Bash(mv:*)",
      "Bash(ps *)",
      "Bash(ps:*)",
      "Bash(top)",
      "Bash(top:*)",
      "Bash(htop)",
      "Bash(htop:*)",
      "Bash(free *)",
      "Bash(free:*)",
      "Bash(df *)",
      "Bash(df:*)",
      "Bash(jmeter *)",
      "Bash(jmeter:*)",
      "Bash(ab *)",
      "Bash(ab:*)",
      "Bash(wrk *)",
      "Bash(wrk:*)",
      "Bash(nvidia-smi *)",
      "Bash(nvidia-smi:*)",
      "Bash(nvidia-ctk *)",
      "Bash(nvidia-ctk:*)",
      "Bash(openssl req *)",
      "Bash(openssl req:*)",
      "Bash(openssl x509 *)",
      "Bash(openssl x509:*)",
      "Bash(modal serve *)",
      "Bash(modal serve:*)",
      "Bash(modal run *)",
      "Bash(modal run:*)",
      "Bash(modal shell *)",
      "Bash(modal shell:*)",
      "Bash(python *)",
      "Bash(python:*)",
      "Bash(python3 *)",
      "Bash(python3:*)",
      "Bash(pip install *)",
      "Bash(pip install:*)",
      "Bash(pip list)",
      "Bash(pip list:*)",
      "Bash(pytest *)",
      "Bash(pytest:*)",
      "Bash(rm *.tmp)",
      "Bash(rm *.log)",
      "Bash(rm target/*)",
      "Bash(rm dist/*)",
      "Bash(rm build/*)",
      "Bash(rm node_modules/.cache/*)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:docs.oracle.com)",
      "WebFetch(domain:docs.docker.com)",
      "WebFetch(domain:docker.com)",
      "WebFetch(domain:hub.docker.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:stackoverflow.com)",
      "WebFetch(domain:maven.apache.org)",
      "WebFetch(domain:spring.io)",
      "WebFetch(domain:postgresql.org)",
      "WebFetch(domain:liquibase.org)",
      "WebFetch(domain:huggingface.co)",
      "WebFetch(domain:llama-cpp-python.readthedocs.io)",
      "WebFetch(domain:docs.mistral.ai)",
      "WebFetch(domain:modal.com)",
      "WebFetch(domain:semver.org)",
      "WebFetch(domain:www.conventionalcommits.org)",
      "WebFetch(domain:developer.mozilla.org)",
      "WebFetch(domain:nodejs.org)",
      "WebFetch(domain:npmjs.com)",
      "WebFetch(domain:pypi.org)",
      "WebFetch(domain:docs.python.org)",
      "WebFetch(domain:www.dxfeed.com)",
      "WebFetch(domain:www.jetbrains.com)",
      "WebFetch(domain:react.dev)",
      "WebFetch(domain:kafka.apache.org)",
      "WebFetch(domain:www.postgresql.org)",
      "Read(**)",
      "Edit(src/**)",
      "Edit(test/**)",
      "Edit(tests/**)",
      "Edit(*.java)",
      "Edit(*.js)",
      "Edit(*.ts)",
      "Edit(*.jsx)",
      "Edit(*.tsx)",
      "Edit(*.py)",
      "Edit(*.go)",
      "Edit(*.rs)",
      "Edit(*.cpp)",
      "Edit(*.c)",
      "Edit(*.h)",
      "Edit(*.hpp)",
      "Edit(*.md)",
      "Edit(*.txt)",
      "Edit(*.json)",
      "Edit(*.yaml)",
      "Edit(*.yml)",
      "Edit(*.toml)",
      "Edit(*.xml)",
      "Edit(*.html)",
      "Edit(*.css)",
      "Edit(*.scss)",
      "Edit(*.sql)",
      "Edit(Dockerfile*)",
      "Edit(docker-compose*.yml)",
      "Edit(.gitignore)",
      "Edit(.dockerignore)",
      "Edit(Makefile)",
      "Edit(package.json)",
      "Edit(package-lock.json)",
      "Edit(pom.xml)",
      "Edit(build.gradle)",
      "Edit(requirements.txt)",
      "Edit(Pipfile)",
      "Edit(go.mod)",
      "Edit(Cargo.toml)",
      "Edit(README*)",
      "Edit(LICENSE*)",
      "Edit(CHANGELOG*)",
      "Edit(.github/**)"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(rm -rf /*)",
      "Bash(rm -rf ~)",
      "Bash(rm -rf ~/*)",
      "Bash(rm -rf .)",
      "Bash(rm -rf ..)",
      "Bash(rm -rf *)",
      "Bash(sudo *)",
      "Bash(sudo:*)",
      "Bash(su *)",
      "Bash(su:*)",
      "Bash(git push *)",
      "Bash(git push:*)",
      "Bash(git force-push *)",
      "Bash(git force-push:*)",
      "Bash(git push --force *)",
      "Bash(git push --force:*)",
      "Bash(git push origin --delete *)",
      "Bash(git push origin --delete:*)",
      "Bash(git tag -d *)",
      "Bash(git tag -d:*)",
      "Bash(git reset --hard HEAD~*)",
      "Bash(git reset --hard HEAD~:*)",
      "Bash(git reset --hard origin/*)",
      "Bash(git reset --hard origin:*)",
      "Bash(mvn deploy)",
      "Bash(mvn deploy:*)",
      "Bash(mvn clean deploy)",
      "Bash(mvn clean deploy:*)",
      "Bash(mvn release:*)",
      "Bash(mvn versions:set *)",
      "Bash(npm publish)",
      "Bash(npm publish:*)",
      "Bash(npm version *)",
      "Bash(npm version:*)",
      "Bash(yarn publish)",
      "Bash(yarn publish:*)",
      "Bash(pnpm publish)",
      "Bash(pnpm publish:*)",
      "Bash(docker push *)",
      "Bash(docker push:*)",
      "Bash(docker system prune *)",
      "Bash(docker system prune:*)",
      "Bash(docker image prune *)",
      "Bash(docker image prune:*)",
      "Bash(docker container prune *)",
      "Bash(docker container prune:*)",
      "Bash(docker volume prune *)",
      "Bash(docker volume prune:*)",
      "Bash(docker network prune *)",
      "Bash(docker network prune:*)",
      "Bash(modal deploy *)",
      "Bash(modal deploy:*)",
      "Bash(curl * | sh)",
      "Bash(curl * | bash)",
      "Bash(wget * | sh)",
      "Bash(wget * | bash)",
      "Bash(curl -o - * | sh)",
      "Bash(wget -O - * | sh)",
      "Bash(curl http://*)",
      "Bash(curl https://*)",
      "Bash(wget http://*)",
      "Bash(wget https://*)",
      "Edit(.env*)",
      "Edit(*.key)",
      "Edit(*.pem)",
      "Edit(*.crt)",
      "Edit(*.p12)",
      "Edit(*.jks)",
      "Edit(*.keystore)",
      "Edit(.ssh/**)",
      "Edit(/etc/**)",
      "Edit(~/.ssh/**)",
      "Edit(~/.aws/**)",
      "Edit(~/.docker/config.json)",
      "Edit(secrets*)",
      "Edit(*credentials*)",
      "Edit(*password*)",
      "Bash(psql * -c 'DROP *')",
      "Bash(psql * -c 'TRUNCATE *')",
      "Bash(psql * -c 'DELETE FROM *')",
      "Bash(chmod 777 *)",
      "Bash(chmod 777:*)",
      "Bash(chmod +x /usr/bin/*)",
      "Bash(chmod +x /usr/bin:*)",
      "Bash(chown *)",
      "Bash(chown:*)",
      "Bash(chgrp *)",
      "Bash(chgrp:*)",
      "Bash(shutdown *)",
      "Bash(shutdown:*)",
      "Bash(reboot *)",
      "Bash(reboot:*)",
      "Bash(init *)",
      "Bash(init:*)",
      "Bash(pip install --upgrade pip)",
      "Bash(pip install --upgrade pip:*)",
      "Bash(history -c)",
      "Bash(history -c:*)",
      "Bash(> /dev/sda*)",
      "Bash(dd if=/dev/zero of=*)"
    ],
    "ask": [
      "Bash(kill *)",
      "Bash(kill:*)",
      "Bash(pkill *)",
      "Bash(pkill:*)",
      "Bash(killall *)",
      "Bash(killall:*)",
      "Bash(systemctl stop *)",
      "Bash(systemctl stop:*)",
      "Bash(systemctl start *)",
      "Bash(systemctl start:*)",
      "Bash(systemctl restart *)",
      "Bash(systemctl restart:*)",
      "Bash(systemctl reload *)",
      "Bash(systemctl reload:*)",
      "Bash(service * stop)",
      "Bash(service * stop:*)",
      "Bash(service * start)",
      "Bash(service * start:*)",
      "Bash(service * restart)",
      "Bash(service * restart:*)",
      "Bash(docker stop *)",
      "Bash(docker stop:*)",
      "Bash(docker kill *)",
      "Bash(docker kill:*)",
      "Bash(docker restart *)",
      "Bash(docker restart:*)",
      "Bash(docker rm *)",
      "Bash(docker rm:*)",
      "Bash(docker rmi *)",
      "Bash(docker rmi:*)",
      "Bash(npm uninstall *)",
      "Bash(npm uninstall:*)",
      "Bash(pip uninstall *)",
      "Bash(pip uninstall:*)",
      "Bash(rm -r *)",
      "Bash(rm -r:*)",
      "Bash(rm -rf target)",
      "Bash(rm -rf dist)",
      "Bash(rm -rf build)",
      "Bash(rm -rf node_modules)"
    ]
  },
  "model": "opus"
}